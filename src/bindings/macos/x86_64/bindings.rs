/* automatically generated by rust-bindgen 0.63.0 */

pub const ORT_API_VERSION: u32 = 14;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED: ONNXTensorElementDataType = 0;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT: ONNXTensorElementDataType = 1;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8: ONNXTensorElementDataType = 2;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8: ONNXTensorElementDataType = 3;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16: ONNXTensorElementDataType = 4;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16: ONNXTensorElementDataType = 5;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32: ONNXTensorElementDataType = 6;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64: ONNXTensorElementDataType = 7;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING: ONNXTensorElementDataType = 8;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL: ONNXTensorElementDataType = 9;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16: ONNXTensorElementDataType = 10;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE: ONNXTensorElementDataType = 11;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32: ONNXTensorElementDataType = 12;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64: ONNXTensorElementDataType = 13;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64: ONNXTensorElementDataType = 14;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128: ONNXTensorElementDataType = 15;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16: ONNXTensorElementDataType = 16;
#[doc = " Copied from TensorProto::DataType\n Currently, Ort doesn't support complex64, complex128"]
pub type ONNXTensorElementDataType = ::std::os::raw::c_uint;
pub const ONNXType_ONNX_TYPE_UNKNOWN: ONNXType = 0;
pub const ONNXType_ONNX_TYPE_TENSOR: ONNXType = 1;
pub const ONNXType_ONNX_TYPE_SEQUENCE: ONNXType = 2;
pub const ONNXType_ONNX_TYPE_MAP: ONNXType = 3;
pub const ONNXType_ONNX_TYPE_OPAQUE: ONNXType = 4;
pub const ONNXType_ONNX_TYPE_SPARSETENSOR: ONNXType = 5;
pub const ONNXType_ONNX_TYPE_OPTIONAL: ONNXType = 6;
pub type ONNXType = ::std::os::raw::c_uint;
pub const OrtSparseFormat_ORT_SPARSE_UNDEFINED: OrtSparseFormat = 0;
pub const OrtSparseFormat_ORT_SPARSE_COO: OrtSparseFormat = 1;
pub const OrtSparseFormat_ORT_SPARSE_CSRC: OrtSparseFormat = 2;
pub const OrtSparseFormat_ORT_SPARSE_BLOCK_SPARSE: OrtSparseFormat = 4;
pub type OrtSparseFormat = ::std::os::raw::c_uint;
pub const OrtSparseIndicesFormat_ORT_SPARSE_COO_INDICES: OrtSparseIndicesFormat = 0;
pub const OrtSparseIndicesFormat_ORT_SPARSE_CSR_INNER_INDICES: OrtSparseIndicesFormat = 1;
pub const OrtSparseIndicesFormat_ORT_SPARSE_CSR_OUTER_INDICES: OrtSparseIndicesFormat = 2;
pub const OrtSparseIndicesFormat_ORT_SPARSE_BLOCK_SPARSE_INDICES: OrtSparseIndicesFormat = 3;
pub type OrtSparseIndicesFormat = ::std::os::raw::c_uint;
#[doc = "< Verbose informational messages (least severe)."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_VERBOSE: OrtLoggingLevel = 0;
#[doc = "< Informational messages."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_INFO: OrtLoggingLevel = 1;
#[doc = "< Warning messages."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_WARNING: OrtLoggingLevel = 2;
#[doc = "< Error messages."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_ERROR: OrtLoggingLevel = 3;
#[doc = "< Fatal error messages (most severe)."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_FATAL: OrtLoggingLevel = 4;
#[doc = " \\brief Logging severity levels\n\n In typical API usage, specifying a logging severity level specifies the minimum severity of log messages to show."]
pub type OrtLoggingLevel = ::std::os::raw::c_uint;
pub const OrtErrorCode_ORT_OK: OrtErrorCode = 0;
pub const OrtErrorCode_ORT_FAIL: OrtErrorCode = 1;
pub const OrtErrorCode_ORT_INVALID_ARGUMENT: OrtErrorCode = 2;
pub const OrtErrorCode_ORT_NO_SUCHFILE: OrtErrorCode = 3;
pub const OrtErrorCode_ORT_NO_MODEL: OrtErrorCode = 4;
pub const OrtErrorCode_ORT_ENGINE_ERROR: OrtErrorCode = 5;
pub const OrtErrorCode_ORT_RUNTIME_EXCEPTION: OrtErrorCode = 6;
pub const OrtErrorCode_ORT_INVALID_PROTOBUF: OrtErrorCode = 7;
pub const OrtErrorCode_ORT_MODEL_LOADED: OrtErrorCode = 8;
pub const OrtErrorCode_ORT_NOT_IMPLEMENTED: OrtErrorCode = 9;
pub const OrtErrorCode_ORT_INVALID_GRAPH: OrtErrorCode = 10;
pub const OrtErrorCode_ORT_EP_FAIL: OrtErrorCode = 11;
pub type OrtErrorCode = ::std::os::raw::c_uint;
pub const OrtOpAttrType_ORT_OP_ATTR_UNDEFINED: OrtOpAttrType = 0;
pub const OrtOpAttrType_ORT_OP_ATTR_INT: OrtOpAttrType = 1;
pub const OrtOpAttrType_ORT_OP_ATTR_INTS: OrtOpAttrType = 2;
pub const OrtOpAttrType_ORT_OP_ATTR_FLOAT: OrtOpAttrType = 3;
pub const OrtOpAttrType_ORT_OP_ATTR_FLOATS: OrtOpAttrType = 4;
pub const OrtOpAttrType_ORT_OP_ATTR_STRING: OrtOpAttrType = 5;
pub const OrtOpAttrType_ORT_OP_ATTR_STRINGS: OrtOpAttrType = 6;
pub type OrtOpAttrType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtEnv {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtStatus {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMemoryInfo {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtIoBinding {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSession {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtValue {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtRunOptions {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTypeInfo {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorTypeAndShapeInfo {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSessionOptions {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOpDomain {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMapTypeInfo {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSequenceTypeInfo {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtModelMetadata {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadPoolParams {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadingOptions {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtArenaCfg {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtPrepackedWeightsContainer {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptionsV2 {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptionsV2 {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCANNProviderOptions {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOp {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpAttr {
	_unused: [u8; 0],
}
pub type OrtStatusPtr = *mut OrtStatus;
#[doc = " \\brief Memory allocation interface\n\n Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators.\n\n When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtAllocator {
	#[doc = "< Must be initialized to ORT_API_VERSION"]
	pub version: u32,
	#[doc = "< Returns a pointer to an allocated block of `size` bytes"]
	pub Alloc: ::std::option::Option<unsafe extern "C" fn(this_: *mut OrtAllocator, size: usize) -> *mut ::std::os::raw::c_void>,
	#[doc = "< Free a block of memory previously allocated with OrtAllocator::Alloc"]
	pub Free: ::std::option::Option<unsafe extern "C" fn(this_: *mut OrtAllocator, p: *mut ::std::os::raw::c_void)>,
	#[doc = "< Return a pointer to an ::OrtMemoryInfo that describes this allocator"]
	pub Info: ::std::option::Option<unsafe extern "C" fn(this_: *const OrtAllocator) -> *const OrtMemoryInfo>,
}
#[test]
fn bindgen_test_layout_OrtAllocator() {
	const UNINIT: ::std::mem::MaybeUninit<OrtAllocator> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtAllocator>(), 32usize, concat!("Size of: ", stringify!(OrtAllocator)));
	assert_eq!(::std::mem::align_of::<OrtAllocator>(), 8usize, concat!("Alignment of ", stringify!(OrtAllocator)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtAllocator), "::", stringify!(version))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Alloc) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtAllocator), "::", stringify!(Alloc))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Free) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(OrtAllocator), "::", stringify!(Free))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Info) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(OrtAllocator), "::", stringify!(Info))
	);
}
pub type OrtLoggingFunction = ::std::option::Option<
	unsafe extern "C" fn(
		param: *mut ::std::os::raw::c_void,
		severity: OrtLoggingLevel,
		category: *const ::std::os::raw::c_char,
		logid: *const ::std::os::raw::c_char,
		code_location: *const ::std::os::raw::c_char,
		message: *const ::std::os::raw::c_char,
	),
>;
pub const GraphOptimizationLevel_ORT_DISABLE_ALL: GraphOptimizationLevel = 0;
pub const GraphOptimizationLevel_ORT_ENABLE_BASIC: GraphOptimizationLevel = 1;
pub const GraphOptimizationLevel_ORT_ENABLE_EXTENDED: GraphOptimizationLevel = 2;
pub const GraphOptimizationLevel_ORT_ENABLE_ALL: GraphOptimizationLevel = 99;
#[doc = " \\brief Graph optimization level\n\n Refer to https://www.onnxruntime.ai/docs/resources/graph-optimizations.html\n for an in-depth understanding of Graph Optimizations"]
pub type GraphOptimizationLevel = ::std::os::raw::c_uint;
pub const ExecutionMode_ORT_SEQUENTIAL: ExecutionMode = 0;
pub const ExecutionMode_ORT_PARALLEL: ExecutionMode = 1;
pub type ExecutionMode = ::std::os::raw::c_uint;
pub const OrtLanguageProjection_ORT_PROJECTION_C: OrtLanguageProjection = 0;
pub const OrtLanguageProjection_ORT_PROJECTION_CPLUSPLUS: OrtLanguageProjection = 1;
pub const OrtLanguageProjection_ORT_PROJECTION_CSHARP: OrtLanguageProjection = 2;
pub const OrtLanguageProjection_ORT_PROJECTION_PYTHON: OrtLanguageProjection = 3;
pub const OrtLanguageProjection_ORT_PROJECTION_JAVA: OrtLanguageProjection = 4;
pub const OrtLanguageProjection_ORT_PROJECTION_WINML: OrtLanguageProjection = 5;
pub const OrtLanguageProjection_ORT_PROJECTION_NODEJS: OrtLanguageProjection = 6;
#[doc = " \\brief Language projection identifiers\n /see OrtApi::SetLanguageProjection"]
pub type OrtLanguageProjection = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelInfo {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelContext {
	_unused: [u8; 0],
}
pub const OrtAllocatorType_OrtInvalidAllocator: OrtAllocatorType = -1;
pub const OrtAllocatorType_OrtDeviceAllocator: OrtAllocatorType = 0;
pub const OrtAllocatorType_OrtArenaAllocator: OrtAllocatorType = 1;
pub type OrtAllocatorType = ::std::os::raw::c_int;
#[doc = "< Any CPU memory used by non-CPU execution provider"]
pub const OrtMemType_OrtMemTypeCPUInput: OrtMemType = -2;
#[doc = "< CPU accessible memory outputted by non-CPU execution provider, i.e. CUDA_PINNED"]
pub const OrtMemType_OrtMemTypeCPUOutput: OrtMemType = -1;
#[doc = "< Temporary CPU accessible memory allocated by non-CPU execution provider, i.e. CUDA_PINNED"]
pub const OrtMemType_OrtMemTypeCPU: OrtMemType = -1;
#[doc = "< The default allocator for execution provider"]
pub const OrtMemType_OrtMemTypeDefault: OrtMemType = 0;
#[doc = " \\brief Memory types for allocated memory, execution provider specific types should be extended in each provider."]
pub type OrtMemType = ::std::os::raw::c_int;
pub const OrtMemoryInfoDeviceType_OrtMemoryInfoDeviceType_CPU: OrtMemoryInfoDeviceType = 0;
pub const OrtMemoryInfoDeviceType_OrtMemoryInfoDeviceType_GPU: OrtMemoryInfoDeviceType = 1;
pub const OrtMemoryInfoDeviceType_OrtMemoryInfoDeviceType_FPGA: OrtMemoryInfoDeviceType = 2;
#[doc = " \\brief This mimics OrtDevice type constants so they can be returned in the API"]
pub type OrtMemoryInfoDeviceType = ::std::os::raw::c_uint;
pub const OrtCudnnConvAlgoSearch_OrtCudnnConvAlgoSearchExhaustive: OrtCudnnConvAlgoSearch = 0;
pub const OrtCudnnConvAlgoSearch_OrtCudnnConvAlgoSearchHeuristic: OrtCudnnConvAlgoSearch = 1;
pub const OrtCudnnConvAlgoSearch_OrtCudnnConvAlgoSearchDefault: OrtCudnnConvAlgoSearch = 2;
#[doc = " \\brief Algorithm to use for cuDNN Convolution Op"]
pub type OrtCudnnConvAlgoSearch = ::std::os::raw::c_uint;
#[doc = " \\brief CUDA Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_CUDA"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptions {
	#[doc = " \\brief CUDA device Id\n   Defaults to 0."]
	pub device_id: ::std::os::raw::c_int,
	#[doc = " \\brief CUDA Convolution algorithm search configuration.\n   See enum OrtCudnnConvAlgoSearch for more details.\n   Defaults to OrtCudnnConvAlgoSearchExhaustive."]
	pub cudnn_conv_algo_search: OrtCudnnConvAlgoSearch,
	#[doc = " \\brief CUDA memory limit (To use all possible memory pass in maximum size_t)\n   Defaults to SIZE_MAX.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
	pub gpu_mem_limit: usize,
	#[doc = " \\brief Strategy used to grow the memory arena\n   0 = kNextPowerOfTwo<br>\n   1 = kSameAsRequested<br>\n   Defaults to 0.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
	pub arena_extend_strategy: ::std::os::raw::c_int,
	#[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the CUDA EP\n   0 = Use separate streams for copying and compute.\n   1 = Use the same stream for copying and compute.\n   Defaults to 1.\n   WARNING: Setting this to 0 may result in data races for some models.\n   Please see issue #4829 for more details."]
	pub do_copy_in_default_stream: ::std::os::raw::c_int,
	#[doc = " \\brief Flag indicating if there is a user provided compute stream\n   Defaults to 0."]
	pub has_user_compute_stream: ::std::os::raw::c_int,
	#[doc = " \\brief User provided compute stream.\n   If provided, please set `has_user_compute_stream` to 1."]
	pub user_compute_stream: *mut ::std::os::raw::c_void,
	#[doc = " \\brief CUDA memory arena configuration parameters"]
	pub default_memory_arena_cfg: *mut OrtArenaCfg,
	#[doc = " \\brief Enable TunableOp.\n   Set it to 1 to enable TunableOp. Otherwise, it is disabled by default.\n   This option can be superseded by environment variable ORT_CUDA_TUNABLE_OP_ENABLED."]
	pub tunable_op_enabled: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtCUDAProviderOptions() {
	const UNINIT: ::std::mem::MaybeUninit<OrtCUDAProviderOptions> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtCUDAProviderOptions>(), 56usize, concat!("Size of: ", stringify!(OrtCUDAProviderOptions)));
	assert_eq!(::std::mem::align_of::<OrtCUDAProviderOptions>(), 8usize, concat!("Alignment of ", stringify!(OrtCUDAProviderOptions)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(device_id))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).cudnn_conv_algo_search) as usize - ptr as usize },
		4usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(cudnn_conv_algo_search))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).gpu_mem_limit) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(gpu_mem_limit))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).arena_extend_strategy) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(arena_extend_strategy))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).do_copy_in_default_stream) as usize - ptr as usize },
		20usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(do_copy_in_default_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(has_user_compute_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize },
		32usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(user_compute_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).default_memory_arena_cfg) as usize - ptr as usize },
		40usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(default_memory_arena_cfg))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).tunable_op_enabled) as usize - ptr as usize },
		48usize,
		concat!("Offset of field: ", stringify!(OrtCUDAProviderOptions), "::", stringify!(tunable_op_enabled))
	);
}
#[doc = " \\brief ROCM Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_ROCM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtROCMProviderOptions {
	#[doc = " \\brief ROCM device Id\n   Defaults to 0."]
	pub device_id: ::std::os::raw::c_int,
	#[doc = " \\brief ROCM MIOpen Convolution algorithm exaustive search option.\n   Defaults to 0 (false)."]
	pub miopen_conv_exhaustive_search: ::std::os::raw::c_int,
	#[doc = " \\brief ROCM memory limit (To use all possible memory pass in maximum size_t)\n   Defaults to SIZE_MAX.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
	pub gpu_mem_limit: usize,
	#[doc = " \\brief Strategy used to grow the memory arena\n   0 = kNextPowerOfTwo<br>\n   1 = kSameAsRequested<br>\n   Defaults to 0.\n   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
	pub arena_extend_strategy: ::std::os::raw::c_int,
	#[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the ROCM EP\n   0 = Use separate streams for copying and compute.\n   1 = Use the same stream for copying and compute.\n   Defaults to 1.\n   WARNING: Setting this to 0 may result in data races for some models.\n   Please see issue #4829 for more details."]
	pub do_copy_in_default_stream: ::std::os::raw::c_int,
	#[doc = " \\brief Flag indicating if there is a user provided compute stream\n   Defaults to 0."]
	pub has_user_compute_stream: ::std::os::raw::c_int,
	#[doc = " \\brief User provided compute stream.\n   If provided, please set `has_user_compute_stream` to 1."]
	pub user_compute_stream: *mut ::std::os::raw::c_void,
	#[doc = " \\brief ROCM memory arena configuration parameters"]
	pub default_memory_arena_cfg: *mut OrtArenaCfg,
	#[doc = " \\brief Enable TunableOp.\n   Set it to 1 to enable TunableOp. Otherwise, it is disabled by default.\n   This option can be superseded by environment variable ORT_ROCM_TUNABLE_OP_ENABLED."]
	pub tunable_op_enabled: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtROCMProviderOptions() {
	const UNINIT: ::std::mem::MaybeUninit<OrtROCMProviderOptions> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtROCMProviderOptions>(), 56usize, concat!("Size of: ", stringify!(OrtROCMProviderOptions)));
	assert_eq!(::std::mem::align_of::<OrtROCMProviderOptions>(), 8usize, concat!("Alignment of ", stringify!(OrtROCMProviderOptions)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(device_id))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).miopen_conv_exhaustive_search) as usize - ptr as usize },
		4usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(miopen_conv_exhaustive_search))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).gpu_mem_limit) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(gpu_mem_limit))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).arena_extend_strategy) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(arena_extend_strategy))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).do_copy_in_default_stream) as usize - ptr as usize },
		20usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(do_copy_in_default_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(has_user_compute_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize },
		32usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(user_compute_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).default_memory_arena_cfg) as usize - ptr as usize },
		40usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(default_memory_arena_cfg))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).tunable_op_enabled) as usize - ptr as usize },
		48usize,
		concat!("Offset of field: ", stringify!(OrtROCMProviderOptions), "::", stringify!(tunable_op_enabled))
	);
}
#[doc = " \\brief TensorRT Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_TensorRT"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptions {
	#[doc = "< CUDA device id (0 = default device)"]
	pub device_id: ::std::os::raw::c_int,
	pub has_user_compute_stream: ::std::os::raw::c_int,
	pub user_compute_stream: *mut ::std::os::raw::c_void,
	pub trt_max_partition_iterations: ::std::os::raw::c_int,
	pub trt_min_subgraph_size: ::std::os::raw::c_int,
	pub trt_max_workspace_size: usize,
	pub trt_fp16_enable: ::std::os::raw::c_int,
	pub trt_int8_enable: ::std::os::raw::c_int,
	pub trt_int8_calibration_table_name: *const ::std::os::raw::c_char,
	pub trt_int8_use_native_calibration_table: ::std::os::raw::c_int,
	pub trt_dla_enable: ::std::os::raw::c_int,
	pub trt_dla_core: ::std::os::raw::c_int,
	pub trt_dump_subgraphs: ::std::os::raw::c_int,
	pub trt_engine_cache_enable: ::std::os::raw::c_int,
	pub trt_engine_cache_path: *const ::std::os::raw::c_char,
	pub trt_engine_decryption_enable: ::std::os::raw::c_int,
	pub trt_engine_decryption_lib_path: *const ::std::os::raw::c_char,
	pub trt_force_sequential_engine_build: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtTensorRTProviderOptions() {
	const UNINIT: ::std::mem::MaybeUninit<OrtTensorRTProviderOptions> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtTensorRTProviderOptions>(), 104usize, concat!("Size of: ", stringify!(OrtTensorRTProviderOptions)));
	assert_eq!(::std::mem::align_of::<OrtTensorRTProviderOptions>(), 8usize, concat!("Alignment of ", stringify!(OrtTensorRTProviderOptions)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(device_id))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize },
		4usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(has_user_compute_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(user_compute_stream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_max_partition_iterations) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_max_partition_iterations))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_min_subgraph_size) as usize - ptr as usize },
		20usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_min_subgraph_size))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_max_workspace_size) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_max_workspace_size))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_fp16_enable) as usize - ptr as usize },
		32usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_fp16_enable))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_int8_enable) as usize - ptr as usize },
		36usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_int8_enable))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_int8_calibration_table_name) as usize - ptr as usize },
		40usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_int8_calibration_table_name))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_int8_use_native_calibration_table) as usize - ptr as usize },
		48usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_int8_use_native_calibration_table))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_dla_enable) as usize - ptr as usize },
		52usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_dla_enable))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_dla_core) as usize - ptr as usize },
		56usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_dla_core))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_dump_subgraphs) as usize - ptr as usize },
		60usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_dump_subgraphs))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_engine_cache_enable) as usize - ptr as usize },
		64usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_engine_cache_enable))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_engine_cache_path) as usize - ptr as usize },
		72usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_engine_cache_path))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_engine_decryption_enable) as usize - ptr as usize },
		80usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_engine_decryption_enable))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_engine_decryption_lib_path) as usize - ptr as usize },
		88usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_engine_decryption_lib_path))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).trt_force_sequential_engine_build) as usize - ptr as usize },
		96usize,
		concat!("Offset of field: ", stringify!(OrtTensorRTProviderOptions), "::", stringify!(trt_force_sequential_engine_build))
	);
}
#[doc = " \\brief MIGraphX Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMIGraphXProviderOptions {
	pub device_id: ::std::os::raw::c_int,
	pub migraphx_fp16_enable: ::std::os::raw::c_int,
	pub migraphx_int8_enable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtMIGraphXProviderOptions() {
	const UNINIT: ::std::mem::MaybeUninit<OrtMIGraphXProviderOptions> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtMIGraphXProviderOptions>(), 12usize, concat!("Size of: ", stringify!(OrtMIGraphXProviderOptions)));
	assert_eq!(::std::mem::align_of::<OrtMIGraphXProviderOptions>(), 4usize, concat!("Alignment of ", stringify!(OrtMIGraphXProviderOptions)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtMIGraphXProviderOptions), "::", stringify!(device_id))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).migraphx_fp16_enable) as usize - ptr as usize },
		4usize,
		concat!("Offset of field: ", stringify!(OrtMIGraphXProviderOptions), "::", stringify!(migraphx_fp16_enable))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).migraphx_int8_enable) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtMIGraphXProviderOptions), "::", stringify!(migraphx_int8_enable))
	);
}
#[doc = " \\brief OpenVINO Provider Options\n\n \\see OrtApi::SessionOptionsAppendExecutionProvider_OpenVINO"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpenVINOProviderOptions {
	#[doc = " \\brief Device type string\n\n Valid settings are one of: \"CPU_FP32\", \"CPU_FP16\", \"GPU_FP32\", \"GPU_FP16\", \"MYRIAD_FP16\", \"VAD-M_FP16\" or \"VAD-F_FP32\""]
	pub device_type: *const ::std::os::raw::c_char,
	#[doc = "< 0 = disabled, nonzero = enabled"]
	pub enable_vpu_fast_compile: ::std::os::raw::c_uchar,
	pub device_id: *const ::std::os::raw::c_char,
	#[doc = "< 0 = Use default number of threads"]
	pub num_of_threads: usize,
	pub cache_dir: *const ::std::os::raw::c_char,
	pub context: *mut ::std::os::raw::c_void,
	#[doc = "< 0 = disabled, nonzero = enabled"]
	pub enable_opencl_throttling: ::std::os::raw::c_uchar,
	#[doc = "< 0 = disabled, nonzero = enabled"]
	pub enable_dynamic_shapes: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_OrtOpenVINOProviderOptions() {
	const UNINIT: ::std::mem::MaybeUninit<OrtOpenVINOProviderOptions> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtOpenVINOProviderOptions>(), 56usize, concat!("Size of: ", stringify!(OrtOpenVINOProviderOptions)));
	assert_eq!(::std::mem::align_of::<OrtOpenVINOProviderOptions>(), 8usize, concat!("Alignment of ", stringify!(OrtOpenVINOProviderOptions)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).device_type) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(device_type))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).enable_vpu_fast_compile) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(enable_vpu_fast_compile))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(device_id))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).num_of_threads) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(num_of_threads))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).cache_dir) as usize - ptr as usize },
		32usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(cache_dir))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
		40usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(context))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).enable_opencl_throttling) as usize - ptr as usize },
		48usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(enable_opencl_throttling))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).enable_dynamic_shapes) as usize - ptr as usize },
		49usize,
		concat!("Offset of field: ", stringify!(OrtOpenVINOProviderOptions), "::", stringify!(enable_dynamic_shapes))
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTrainingApi {
	_unused: [u8; 0],
}
#[doc = " \\brief The helper interface to get the right version of OrtApi\n\n Get a pointer to this structure through ::OrtGetApiBase"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApiBase {
	#[doc = " \\brief Get a pointer to the requested version of the ::OrtApi\n\n \\param[in] version Must be ::ORT_API_VERSION\n \\return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime\n   older than the version created with this header file."]
	pub GetApi: ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtApi>,
	#[doc = "< Returns a null terminated string of the version of the Onnxruntime library (eg: \"1.8.1\")"]
	pub GetVersionString: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_OrtApiBase() {
	const UNINIT: ::std::mem::MaybeUninit<OrtApiBase> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtApiBase>(), 16usize, concat!("Size of: ", stringify!(OrtApiBase)));
	assert_eq!(::std::mem::align_of::<OrtApiBase>(), 8usize, concat!("Alignment of ", stringify!(OrtApiBase)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetApi) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtApiBase), "::", stringify!(GetApi))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetVersionString) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtApiBase), "::", stringify!(GetVersionString))
	);
}
extern "C" {
	#[doc = " \\brief The Onnxruntime library's entry point to access the C API\n\n Call this to get the a pointer to an ::OrtApiBase"]
	pub fn OrtGetApiBase() -> *const OrtApiBase;
}
#[doc = " \\brief Thread work loop function\n\n Onnxruntime will provide the working loop on custom thread creation\n Argument is an onnxruntime built-in type which will be provided when thread pool calls OrtCustomCreateThreadFn"]
pub type OrtThreadWorkerFn = ::std::option::Option<unsafe extern "C" fn(ort_worker_fn_param: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomHandleType {
	pub __place_holder: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_OrtCustomHandleType() {
	const UNINIT: ::std::mem::MaybeUninit<OrtCustomHandleType> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtCustomHandleType>(), 1usize, concat!("Size of: ", stringify!(OrtCustomHandleType)));
	assert_eq!(::std::mem::align_of::<OrtCustomHandleType>(), 1usize, concat!("Alignment of ", stringify!(OrtCustomHandleType)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).__place_holder) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtCustomHandleType), "::", stringify!(__place_holder))
	);
}
pub type OrtCustomThreadHandle = *const OrtCustomHandleType;
#[doc = " \\brief Ort custom thread creation function\n\n The function should return a thread handle to be used in onnxruntime thread pools\n Onnxruntime will throw exception on return value of nullptr or 0, indicating that the function failed to create a thread"]
pub type OrtCustomCreateThreadFn = ::std::option::Option<
	unsafe extern "C" fn(
		ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
		ort_thread_worker_fn: OrtThreadWorkerFn,
		ort_worker_fn_param: *mut ::std::os::raw::c_void,
	) -> OrtCustomThreadHandle,
>;
#[doc = " \\brief Custom thread join function\n\n Onnxruntime thread pool destructor will call the function to join a custom thread.\n Argument ort_custom_thread_handle is the value returned by OrtCustomCreateThreadFn"]
pub type OrtCustomJoinThreadFn = ::std::option::Option<unsafe extern "C" fn(ort_custom_thread_handle: OrtCustomThreadHandle)>;
#[doc = " \\brief The C API\n\n All C API functions are defined inside this structure as pointers to functions.\n Call OrtApiBase::GetApi to get a pointer to it\n\n \\nosubgrouping"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApi {
	#[doc = " \\brief Create an OrtStatus from a null terminated string\n\n \\param[in] code\n \\param[in] msg A null-terminated string. Its contents will be copied.\n \\return A new OrtStatus object, must be destroyed with OrtApi::ReleaseStatus"]
	pub CreateStatus: ::std::option::Option<unsafe extern "C" fn(code: OrtErrorCode, msg: *const ::std::os::raw::c_char) -> *mut OrtStatus>,
	#[doc = " \\brief Get OrtErrorCode from OrtStatus\n\n \\param[in] status\n \\return OrtErrorCode that \\p status was created with"]
	pub GetErrorCode: ::std::option::Option<unsafe extern "C" fn(status: *const OrtStatus) -> OrtErrorCode>,
	#[doc = " \\brief Get error string from OrtStatus\n\n \\param[in] status\n \\return The error message inside the `status`. Do not free the returned value."]
	pub GetErrorMessage: ::std::option::Option<unsafe extern "C" fn(status: *const OrtStatus) -> *const ::std::os::raw::c_char>,
	pub CreateEnv: ::std::option::Option<
		unsafe extern "C" fn(log_severity_level: OrtLoggingLevel, logid: *const ::std::os::raw::c_char, out: *mut *mut OrtEnv) -> OrtStatusPtr,
	>,
	pub CreateEnvWithCustomLogger: ::std::option::Option<
		unsafe extern "C" fn(
			logging_function: OrtLoggingFunction,
			logger_param: *mut ::std::os::raw::c_void,
			log_severity_level: OrtLoggingLevel,
			logid: *const ::std::os::raw::c_char,
			out: *mut *mut OrtEnv,
		) -> OrtStatusPtr,
	>,
	pub EnableTelemetryEvents: ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
	pub DisableTelemetryEvents: ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
	pub CreateSession: ::std::option::Option<
		unsafe extern "C" fn(
			env: *const OrtEnv,
			model_path: *const ::std::os::raw::c_char,
			options: *const OrtSessionOptions,
			out: *mut *mut OrtSession,
		) -> OrtStatusPtr,
	>,
	pub CreateSessionFromArray: ::std::option::Option<
		unsafe extern "C" fn(
			env: *const OrtEnv,
			model_data: *const ::std::os::raw::c_void,
			model_data_length: usize,
			options: *const OrtSessionOptions,
			out: *mut *mut OrtSession,
		) -> OrtStatusPtr,
	>,
	pub Run: ::std::option::Option<
		unsafe extern "C" fn(
			session: *mut OrtSession,
			run_options: *const OrtRunOptions,
			input_names: *const *const ::std::os::raw::c_char,
			inputs: *const *const OrtValue,
			input_len: usize,
			output_names: *const *const ::std::os::raw::c_char,
			output_names_len: usize,
			outputs: *mut *mut OrtValue,
		) -> OrtStatusPtr,
	>,
	pub CreateSessionOptions: ::std::option::Option<unsafe extern "C" fn(options: *mut *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub SetOptimizedModelFilePath:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, optimized_model_filepath: *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub CloneSessionOptions:
		::std::option::Option<unsafe extern "C" fn(in_options: *const OrtSessionOptions, out_options: *mut *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub SetSessionExecutionMode: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, execution_mode: ExecutionMode) -> OrtStatusPtr>,
	pub EnableProfiling:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, profile_file_prefix: *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub DisableProfiling: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub EnableMemPattern: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub DisableMemPattern: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub EnableCpuMemArena: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub DisableCpuMemArena: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub SetSessionLogId: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, logid: *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub SetSessionLogVerbosityLevel:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, session_log_verbosity_level: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub SetSessionLogSeverityLevel:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, session_log_severity_level: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub SetSessionGraphOptimizationLevel:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, graph_optimization_level: GraphOptimizationLevel) -> OrtStatusPtr>,
	pub SetIntraOpNumThreads:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, intra_op_num_threads: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub SetInterOpNumThreads:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, inter_op_num_threads: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub CreateCustomOpDomain:
		::std::option::Option<unsafe extern "C" fn(domain: *const ::std::os::raw::c_char, out: *mut *mut OrtCustomOpDomain) -> OrtStatusPtr>,
	pub CustomOpDomain_Add: ::std::option::Option<unsafe extern "C" fn(custom_op_domain: *mut OrtCustomOpDomain, op: *const OrtCustomOp) -> OrtStatusPtr>,
	pub AddCustomOpDomain:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, custom_op_domain: *mut OrtCustomOpDomain) -> OrtStatusPtr>,
	pub RegisterCustomOpsLibrary: ::std::option::Option<
		unsafe extern "C" fn(
			options: *mut OrtSessionOptions,
			library_path: *const ::std::os::raw::c_char,
			library_handle: *mut *mut ::std::os::raw::c_void,
		) -> OrtStatusPtr,
	>,
	pub SessionGetInputCount: ::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr>,
	pub SessionGetOutputCount: ::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr>,
	pub SessionGetOverridableInitializerCount: ::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr>,
	pub SessionGetInputTypeInfo:
		::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, index: usize, type_info: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub SessionGetOutputTypeInfo:
		::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, index: usize, type_info: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub SessionGetOverridableInitializerTypeInfo:
		::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, index: usize, type_info: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub SessionGetInputName: ::std::option::Option<
		unsafe extern "C" fn(session: *const OrtSession, index: usize, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub SessionGetOutputName: ::std::option::Option<
		unsafe extern "C" fn(session: *const OrtSession, index: usize, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub SessionGetOverridableInitializerName: ::std::option::Option<
		unsafe extern "C" fn(session: *const OrtSession, index: usize, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub CreateRunOptions: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtRunOptions) -> OrtStatusPtr>,
	pub RunOptionsSetRunLogVerbosityLevel:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions, log_verbosity_level: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub RunOptionsSetRunLogSeverityLevel:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions, log_severity_level: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub RunOptionsSetRunTag: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions, run_tag: *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub RunOptionsGetRunLogVerbosityLevel:
		::std::option::Option<unsafe extern "C" fn(options: *const OrtRunOptions, log_verbosity_level: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub RunOptionsGetRunLogSeverityLevel:
		::std::option::Option<unsafe extern "C" fn(options: *const OrtRunOptions, log_severity_level: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub RunOptionsGetRunTag:
		::std::option::Option<unsafe extern "C" fn(options: *const OrtRunOptions, run_tag: *mut *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub RunOptionsSetTerminate: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
	pub RunOptionsUnsetTerminate: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
	pub CreateTensorAsOrtValue: ::std::option::Option<
		unsafe extern "C" fn(
			allocator: *mut OrtAllocator,
			shape: *const i64,
			shape_len: usize,
			type_: ONNXTensorElementDataType,
			out: *mut *mut OrtValue,
		) -> OrtStatusPtr,
	>,
	pub CreateTensorWithDataAsOrtValue: ::std::option::Option<
		unsafe extern "C" fn(
			info: *const OrtMemoryInfo,
			p_data: *mut ::std::os::raw::c_void,
			p_data_len: usize,
			shape: *const i64,
			shape_len: usize,
			type_: ONNXTensorElementDataType,
			out: *mut *mut OrtValue,
		) -> OrtStatusPtr,
	>,
	pub IsTensor: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, out: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub GetTensorMutableData: ::std::option::Option<unsafe extern "C" fn(value: *mut OrtValue, out: *mut *mut ::std::os::raw::c_void) -> OrtStatusPtr>,
	pub FillStringTensor:
		::std::option::Option<unsafe extern "C" fn(value: *mut OrtValue, s: *const *const ::std::os::raw::c_char, s_len: usize) -> OrtStatusPtr>,
	pub GetStringTensorDataLength: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, len: *mut usize) -> OrtStatusPtr>,
	pub GetStringTensorContent: ::std::option::Option<
		unsafe extern "C" fn(value: *const OrtValue, s: *mut ::std::os::raw::c_void, s_len: usize, offsets: *mut usize, offsets_len: usize) -> OrtStatusPtr,
	>,
	pub CastTypeInfoToTensorInfo:
		::std::option::Option<unsafe extern "C" fn(type_info: *const OrtTypeInfo, out: *mut *const OrtTensorTypeAndShapeInfo) -> OrtStatusPtr>,
	pub GetOnnxTypeFromTypeInfo: ::std::option::Option<unsafe extern "C" fn(type_info: *const OrtTypeInfo, out: *mut ONNXType) -> OrtStatusPtr>,
	pub CreateTensorTypeAndShapeInfo: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr>,
	pub SetTensorElementType:
		::std::option::Option<unsafe extern "C" fn(info: *mut OrtTensorTypeAndShapeInfo, type_: ONNXTensorElementDataType) -> OrtStatusPtr>,
	pub SetDimensions:
		::std::option::Option<unsafe extern "C" fn(info: *mut OrtTensorTypeAndShapeInfo, dim_values: *const i64, dim_count: usize) -> OrtStatusPtr>,
	pub GetTensorElementType:
		::std::option::Option<unsafe extern "C" fn(info: *const OrtTensorTypeAndShapeInfo, out: *mut ONNXTensorElementDataType) -> OrtStatusPtr>,
	pub GetDimensionsCount: ::std::option::Option<unsafe extern "C" fn(info: *const OrtTensorTypeAndShapeInfo, out: *mut usize) -> OrtStatusPtr>,
	pub GetDimensions:
		::std::option::Option<unsafe extern "C" fn(info: *const OrtTensorTypeAndShapeInfo, dim_values: *mut i64, dim_values_length: usize) -> OrtStatusPtr>,
	pub GetSymbolicDimensions: ::std::option::Option<
		unsafe extern "C" fn(info: *const OrtTensorTypeAndShapeInfo, dim_params: *mut *const ::std::os::raw::c_char, dim_params_length: usize) -> OrtStatusPtr,
	>,
	pub GetTensorShapeElementCount: ::std::option::Option<unsafe extern "C" fn(info: *const OrtTensorTypeAndShapeInfo, out: *mut usize) -> OrtStatusPtr>,
	pub GetTensorTypeAndShape: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr>,
	pub GetTypeInfo: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, out: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub GetValueType: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, out: *mut ONNXType) -> OrtStatusPtr>,
	pub CreateMemoryInfo: ::std::option::Option<
		unsafe extern "C" fn(
			name: *const ::std::os::raw::c_char,
			type_: OrtAllocatorType,
			id: ::std::os::raw::c_int,
			mem_type: OrtMemType,
			out: *mut *mut OrtMemoryInfo,
		) -> OrtStatusPtr,
	>,
	pub CreateCpuMemoryInfo:
		::std::option::Option<unsafe extern "C" fn(type_: OrtAllocatorType, mem_type: OrtMemType, out: *mut *mut OrtMemoryInfo) -> OrtStatusPtr>,
	pub CompareMemoryInfo:
		::std::option::Option<unsafe extern "C" fn(info1: *const OrtMemoryInfo, info2: *const OrtMemoryInfo, out: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub MemoryInfoGetName: ::std::option::Option<unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub MemoryInfoGetId: ::std::option::Option<unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub MemoryInfoGetMemType: ::std::option::Option<unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemType) -> OrtStatusPtr>,
	pub MemoryInfoGetType: ::std::option::Option<unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtAllocatorType) -> OrtStatusPtr>,
	pub AllocatorAlloc:
		::std::option::Option<unsafe extern "C" fn(ort_allocator: *mut OrtAllocator, size: usize, out: *mut *mut ::std::os::raw::c_void) -> OrtStatusPtr>,
	pub AllocatorFree: ::std::option::Option<unsafe extern "C" fn(ort_allocator: *mut OrtAllocator, p: *mut ::std::os::raw::c_void) -> OrtStatusPtr>,
	pub AllocatorGetInfo: ::std::option::Option<unsafe extern "C" fn(ort_allocator: *const OrtAllocator, out: *mut *const OrtMemoryInfo) -> OrtStatusPtr>,
	pub GetAllocatorWithDefaultOptions: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtAllocator) -> OrtStatusPtr>,
	pub AddFreeDimensionOverride: ::std::option::Option<
		unsafe extern "C" fn(options: *mut OrtSessionOptions, dim_denotation: *const ::std::os::raw::c_char, dim_value: i64) -> OrtStatusPtr,
	>,
	pub GetValue: ::std::option::Option<
		unsafe extern "C" fn(value: *const OrtValue, index: ::std::os::raw::c_int, allocator: *mut OrtAllocator, out: *mut *mut OrtValue) -> OrtStatusPtr,
	>,
	pub GetValueCount: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, out: *mut usize) -> OrtStatusPtr>,
	pub CreateValue: ::std::option::Option<
		unsafe extern "C" fn(in_: *const *const OrtValue, num_values: usize, value_type: ONNXType, out: *mut *mut OrtValue) -> OrtStatusPtr,
	>,
	pub CreateOpaqueValue: ::std::option::Option<
		unsafe extern "C" fn(
			domain_name: *const ::std::os::raw::c_char,
			type_name: *const ::std::os::raw::c_char,
			data_container: *const ::std::os::raw::c_void,
			data_container_size: usize,
			out: *mut *mut OrtValue,
		) -> OrtStatusPtr,
	>,
	pub GetOpaqueValue: ::std::option::Option<
		unsafe extern "C" fn(
			domain_name: *const ::std::os::raw::c_char,
			type_name: *const ::std::os::raw::c_char,
			in_: *const OrtValue,
			data_container: *mut ::std::os::raw::c_void,
			data_container_size: usize,
		) -> OrtStatusPtr,
	>,
	pub KernelInfoGetAttribute_float:
		::std::option::Option<unsafe extern "C" fn(info: *const OrtKernelInfo, name: *const ::std::os::raw::c_char, out: *mut f32) -> OrtStatusPtr>,
	pub KernelInfoGetAttribute_int64:
		::std::option::Option<unsafe extern "C" fn(info: *const OrtKernelInfo, name: *const ::std::os::raw::c_char, out: *mut i64) -> OrtStatusPtr>,
	pub KernelInfoGetAttribute_string: ::std::option::Option<
		unsafe extern "C" fn(
			info: *const OrtKernelInfo,
			name: *const ::std::os::raw::c_char,
			out: *mut ::std::os::raw::c_char,
			size: *mut usize,
		) -> OrtStatusPtr,
	>,
	pub KernelContext_GetInputCount: ::std::option::Option<unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr>,
	pub KernelContext_GetOutputCount: ::std::option::Option<unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr>,
	pub KernelContext_GetInput:
		::std::option::Option<unsafe extern "C" fn(context: *const OrtKernelContext, index: usize, out: *mut *const OrtValue) -> OrtStatusPtr>,
	pub KernelContext_GetOutput: ::std::option::Option<
		unsafe extern "C" fn(context: *mut OrtKernelContext, index: usize, dim_values: *const i64, dim_count: usize, out: *mut *mut OrtValue) -> OrtStatusPtr,
	>,
	pub ReleaseEnv: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtEnv)>,
	pub ReleaseStatus: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtStatus)>,
	pub ReleaseMemoryInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMemoryInfo)>,
	pub ReleaseSession: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSession)>,
	pub ReleaseValue: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtValue)>,
	pub ReleaseRunOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtRunOptions)>,
	pub ReleaseTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTypeInfo)>,
	pub ReleaseTensorTypeAndShapeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorTypeAndShapeInfo)>,
	pub ReleaseSessionOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSessionOptions)>,
	pub ReleaseCustomOpDomain: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCustomOpDomain)>,
	pub GetDenotationFromTypeInfo: ::std::option::Option<
		unsafe extern "C" fn(type_info: *const OrtTypeInfo, denotation: *mut *const ::std::os::raw::c_char, len: *mut usize) -> OrtStatusPtr,
	>,
	pub CastTypeInfoToMapTypeInfo: ::std::option::Option<unsafe extern "C" fn(type_info: *const OrtTypeInfo, out: *mut *const OrtMapTypeInfo) -> OrtStatusPtr>,
	pub CastTypeInfoToSequenceTypeInfo:
		::std::option::Option<unsafe extern "C" fn(type_info: *const OrtTypeInfo, out: *mut *const OrtSequenceTypeInfo) -> OrtStatusPtr>,
	pub GetMapKeyType: ::std::option::Option<unsafe extern "C" fn(map_type_info: *const OrtMapTypeInfo, out: *mut ONNXTensorElementDataType) -> OrtStatusPtr>,
	pub GetMapValueType: ::std::option::Option<unsafe extern "C" fn(map_type_info: *const OrtMapTypeInfo, type_info: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub GetSequenceElementType:
		::std::option::Option<unsafe extern "C" fn(sequence_type_info: *const OrtSequenceTypeInfo, type_info: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub ReleaseMapTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMapTypeInfo)>,
	pub ReleaseSequenceTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSequenceTypeInfo)>,
	pub SessionEndProfiling: ::std::option::Option<
		unsafe extern "C" fn(session: *mut OrtSession, allocator: *mut OrtAllocator, out: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub SessionGetModelMetadata: ::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, out: *mut *mut OrtModelMetadata) -> OrtStatusPtr>,
	pub ModelMetadataGetProducerName: ::std::option::Option<
		unsafe extern "C" fn(model_metadata: *const OrtModelMetadata, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub ModelMetadataGetGraphName: ::std::option::Option<
		unsafe extern "C" fn(model_metadata: *const OrtModelMetadata, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub ModelMetadataGetDomain: ::std::option::Option<
		unsafe extern "C" fn(model_metadata: *const OrtModelMetadata, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub ModelMetadataGetDescription: ::std::option::Option<
		unsafe extern "C" fn(model_metadata: *const OrtModelMetadata, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub ModelMetadataLookupCustomMetadataMap: ::std::option::Option<
		unsafe extern "C" fn(
			model_metadata: *const OrtModelMetadata,
			allocator: *mut OrtAllocator,
			key: *const ::std::os::raw::c_char,
			value: *mut *mut ::std::os::raw::c_char,
		) -> OrtStatusPtr,
	>,
	pub ModelMetadataGetVersion: ::std::option::Option<unsafe extern "C" fn(model_metadata: *const OrtModelMetadata, value: *mut i64) -> OrtStatusPtr>,
	pub ReleaseModelMetadata: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtModelMetadata)>,
	pub CreateEnvWithGlobalThreadPools: ::std::option::Option<
		unsafe extern "C" fn(
			log_severity_level: OrtLoggingLevel,
			logid: *const ::std::os::raw::c_char,
			tp_options: *const OrtThreadingOptions,
			out: *mut *mut OrtEnv,
		) -> OrtStatusPtr,
	>,
	pub DisablePerSessionThreads: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub CreateThreadingOptions: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtThreadingOptions) -> OrtStatusPtr>,
	pub ReleaseThreadingOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtThreadingOptions)>,
	pub ModelMetadataGetCustomMetadataMapKeys: ::std::option::Option<
		unsafe extern "C" fn(
			model_metadata: *const OrtModelMetadata,
			allocator: *mut OrtAllocator,
			keys: *mut *mut *mut ::std::os::raw::c_char,
			num_keys: *mut i64,
		) -> OrtStatusPtr,
	>,
	pub AddFreeDimensionOverrideByName:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, dim_name: *const ::std::os::raw::c_char, dim_value: i64) -> OrtStatusPtr>,
	pub GetAvailableProviders: ::std::option::Option<
		unsafe extern "C" fn(out_ptr: *mut *mut *mut ::std::os::raw::c_char, provider_length: *mut ::std::os::raw::c_int) -> OrtStatusPtr,
	>,
	pub ReleaseAvailableProviders:
		::std::option::Option<unsafe extern "C" fn(ptr: *mut *mut ::std::os::raw::c_char, providers_length: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub GetStringTensorElementLength: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, index: usize, out: *mut usize) -> OrtStatusPtr>,
	pub GetStringTensorElement:
		::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, s_len: usize, index: usize, s: *mut ::std::os::raw::c_void) -> OrtStatusPtr>,
	pub FillStringTensorElement:
		::std::option::Option<unsafe extern "C" fn(value: *mut OrtValue, s: *const ::std::os::raw::c_char, index: usize) -> OrtStatusPtr>,
	pub AddSessionConfigEntry: ::std::option::Option<
		unsafe extern "C" fn(
			options: *mut OrtSessionOptions,
			config_key: *const ::std::os::raw::c_char,
			config_value: *const ::std::os::raw::c_char,
		) -> OrtStatusPtr,
	>,
	pub CreateAllocator:
		::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, mem_info: *const OrtMemoryInfo, out: *mut *mut OrtAllocator) -> OrtStatusPtr>,
	pub ReleaseAllocator: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtAllocator)>,
	pub RunWithBinding: ::std::option::Option<
		unsafe extern "C" fn(session: *mut OrtSession, run_options: *const OrtRunOptions, binding_ptr: *const OrtIoBinding) -> OrtStatusPtr,
	>,
	pub CreateIoBinding: ::std::option::Option<unsafe extern "C" fn(session: *mut OrtSession, out: *mut *mut OrtIoBinding) -> OrtStatusPtr>,
	pub ReleaseIoBinding: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtIoBinding)>,
	pub BindInput: ::std::option::Option<
		unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding, name: *const ::std::os::raw::c_char, val_ptr: *const OrtValue) -> OrtStatusPtr,
	>,
	pub BindOutput: ::std::option::Option<
		unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding, name: *const ::std::os::raw::c_char, val_ptr: *const OrtValue) -> OrtStatusPtr,
	>,
	pub BindOutputToDevice: ::std::option::Option<
		unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding, name: *const ::std::os::raw::c_char, mem_info_ptr: *const OrtMemoryInfo) -> OrtStatusPtr,
	>,
	pub GetBoundOutputNames: ::std::option::Option<
		unsafe extern "C" fn(
			binding_ptr: *const OrtIoBinding,
			allocator: *mut OrtAllocator,
			buffer: *mut *mut ::std::os::raw::c_char,
			lengths: *mut *mut usize,
			count: *mut usize,
		) -> OrtStatusPtr,
	>,
	pub GetBoundOutputValues: ::std::option::Option<
		unsafe extern "C" fn(
			binding_ptr: *const OrtIoBinding,
			allocator: *mut OrtAllocator,
			output: *mut *mut *mut OrtValue,
			output_count: *mut usize,
		) -> OrtStatusPtr,
	>,
	#[doc = " \\brief Clears any previously set Inputs for an ::OrtIoBinding"]
	pub ClearBoundInputs: ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
	#[doc = " \\brief Clears any previously set Outputs for an ::OrtIoBinding"]
	pub ClearBoundOutputs: ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
	pub TensorAt: ::std::option::Option<
		unsafe extern "C" fn(
			value: *mut OrtValue,
			location_values: *const i64,
			location_values_count: usize,
			out: *mut *mut ::std::os::raw::c_void,
		) -> OrtStatusPtr,
	>,
	pub CreateAndRegisterAllocator:
		::std::option::Option<unsafe extern "C" fn(env: *mut OrtEnv, mem_info: *const OrtMemoryInfo, arena_cfg: *const OrtArenaCfg) -> OrtStatusPtr>,
	pub SetLanguageProjection: ::std::option::Option<unsafe extern "C" fn(ort_env: *const OrtEnv, projection: OrtLanguageProjection) -> OrtStatusPtr>,
	pub SessionGetProfilingStartTimeNs: ::std::option::Option<unsafe extern "C" fn(session: *const OrtSession, out: *mut u64) -> OrtStatusPtr>,
	pub SetGlobalIntraOpNumThreads:
		::std::option::Option<unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions, intra_op_num_threads: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub SetGlobalInterOpNumThreads:
		::std::option::Option<unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions, inter_op_num_threads: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub SetGlobalSpinControl:
		::std::option::Option<unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions, allow_spinning: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub AddInitializer:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, name: *const ::std::os::raw::c_char, val: *const OrtValue) -> OrtStatusPtr>,
	pub CreateEnvWithCustomLoggerAndGlobalThreadPools: ::std::option::Option<
		unsafe extern "C" fn(
			logging_function: OrtLoggingFunction,
			logger_param: *mut ::std::os::raw::c_void,
			log_severity_level: OrtLoggingLevel,
			logid: *const ::std::os::raw::c_char,
			tp_options: *const OrtThreadingOptions,
			out: *mut *mut OrtEnv,
		) -> OrtStatusPtr,
	>,
	pub SessionOptionsAppendExecutionProvider_CUDA:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, cuda_options: *const OrtCUDAProviderOptions) -> OrtStatusPtr>,
	pub SessionOptionsAppendExecutionProvider_ROCM:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, rocm_options: *const OrtROCMProviderOptions) -> OrtStatusPtr>,
	pub SessionOptionsAppendExecutionProvider_OpenVINO:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, provider_options: *const OrtOpenVINOProviderOptions) -> OrtStatusPtr>,
	pub SetGlobalDenormalAsZero: ::std::option::Option<unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions) -> OrtStatusPtr>,
	pub CreateArenaCfg: ::std::option::Option<
		unsafe extern "C" fn(
			max_mem: usize,
			arena_extend_strategy: ::std::os::raw::c_int,
			initial_chunk_size_bytes: ::std::os::raw::c_int,
			max_dead_bytes_per_chunk: ::std::os::raw::c_int,
			out: *mut *mut OrtArenaCfg,
		) -> OrtStatusPtr,
	>,
	pub ReleaseArenaCfg: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtArenaCfg)>,
	pub ModelMetadataGetGraphDescription: ::std::option::Option<
		unsafe extern "C" fn(model_metadata: *const OrtModelMetadata, allocator: *mut OrtAllocator, value: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	pub SessionOptionsAppendExecutionProvider_TensorRT:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, tensorrt_options: *const OrtTensorRTProviderOptions) -> OrtStatusPtr>,
	pub SetCurrentGpuDeviceId: ::std::option::Option<unsafe extern "C" fn(device_id: ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub GetCurrentGpuDeviceId: ::std::option::Option<unsafe extern "C" fn(device_id: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub KernelInfoGetAttributeArray_float: ::std::option::Option<
		unsafe extern "C" fn(info: *const OrtKernelInfo, name: *const ::std::os::raw::c_char, out: *mut f32, size: *mut usize) -> OrtStatusPtr,
	>,
	pub KernelInfoGetAttributeArray_int64: ::std::option::Option<
		unsafe extern "C" fn(info: *const OrtKernelInfo, name: *const ::std::os::raw::c_char, out: *mut i64, size: *mut usize) -> OrtStatusPtr,
	>,
	pub CreateArenaCfgV2: ::std::option::Option<
		unsafe extern "C" fn(
			arena_config_keys: *const *const ::std::os::raw::c_char,
			arena_config_values: *const usize,
			num_keys: usize,
			out: *mut *mut OrtArenaCfg,
		) -> OrtStatusPtr,
	>,
	pub AddRunConfigEntry: ::std::option::Option<
		unsafe extern "C" fn(
			options: *mut OrtRunOptions,
			config_key: *const ::std::os::raw::c_char,
			config_value: *const ::std::os::raw::c_char,
		) -> OrtStatusPtr,
	>,
	pub CreatePrepackedWeightsContainer: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtPrepackedWeightsContainer) -> OrtStatusPtr>,
	pub ReleasePrepackedWeightsContainer: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtPrepackedWeightsContainer)>,
	pub CreateSessionWithPrepackedWeightsContainer: ::std::option::Option<
		unsafe extern "C" fn(
			env: *const OrtEnv,
			model_path: *const ::std::os::raw::c_char,
			options: *const OrtSessionOptions,
			prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
			out: *mut *mut OrtSession,
		) -> OrtStatusPtr,
	>,
	pub CreateSessionFromArrayWithPrepackedWeightsContainer: ::std::option::Option<
		unsafe extern "C" fn(
			env: *const OrtEnv,
			model_data: *const ::std::os::raw::c_void,
			model_data_length: usize,
			options: *const OrtSessionOptions,
			prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
			out: *mut *mut OrtSession,
		) -> OrtStatusPtr,
	>,
	pub SessionOptionsAppendExecutionProvider_TensorRT_V2:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, tensorrt_options: *const OrtTensorRTProviderOptionsV2) -> OrtStatusPtr>,
	pub CreateTensorRTProviderOptions: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtTensorRTProviderOptionsV2) -> OrtStatusPtr>,
	pub UpdateTensorRTProviderOptions: ::std::option::Option<
		unsafe extern "C" fn(
			tensorrt_options: *mut OrtTensorRTProviderOptionsV2,
			provider_options_keys: *const *const ::std::os::raw::c_char,
			provider_options_values: *const *const ::std::os::raw::c_char,
			num_keys: usize,
		) -> OrtStatusPtr,
	>,
	pub GetTensorRTProviderOptionsAsString: ::std::option::Option<
		unsafe extern "C" fn(
			tensorrt_options: *const OrtTensorRTProviderOptionsV2,
			allocator: *mut OrtAllocator,
			ptr: *mut *mut ::std::os::raw::c_char,
		) -> OrtStatusPtr,
	>,
	#[doc = " \\brief Release an ::OrtTensorRTProviderOptionsV2\n\n \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does"]
	pub ReleaseTensorRTProviderOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorRTProviderOptionsV2)>,
	pub EnableOrtCustomOps: ::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr>,
	pub RegisterAllocator: ::std::option::Option<unsafe extern "C" fn(env: *mut OrtEnv, allocator: *mut OrtAllocator) -> OrtStatusPtr>,
	pub UnregisterAllocator: ::std::option::Option<unsafe extern "C" fn(env: *mut OrtEnv, mem_info: *const OrtMemoryInfo) -> OrtStatusPtr>,
	pub IsSparseTensor: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, out: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub CreateSparseTensorAsOrtValue: ::std::option::Option<
		unsafe extern "C" fn(
			allocator: *mut OrtAllocator,
			dense_shape: *const i64,
			dense_shape_len: usize,
			type_: ONNXTensorElementDataType,
			out: *mut *mut OrtValue,
		) -> OrtStatusPtr,
	>,
	pub FillSparseTensorCoo: ::std::option::Option<
		unsafe extern "C" fn(
			ort_value: *mut OrtValue,
			data_mem_info: *const OrtMemoryInfo,
			values_shape: *const i64,
			values_shape_len: usize,
			values: *const ::std::os::raw::c_void,
			indices_data: *const i64,
			indices_num: usize,
		) -> OrtStatusPtr,
	>,
	pub FillSparseTensorCsr: ::std::option::Option<
		unsafe extern "C" fn(
			ort_value: *mut OrtValue,
			data_mem_info: *const OrtMemoryInfo,
			values_shape: *const i64,
			values_shape_len: usize,
			values: *const ::std::os::raw::c_void,
			inner_indices_data: *const i64,
			inner_indices_num: usize,
			outer_indices_data: *const i64,
			outer_indices_num: usize,
		) -> OrtStatusPtr,
	>,
	pub FillSparseTensorBlockSparse: ::std::option::Option<
		unsafe extern "C" fn(
			ort_value: *mut OrtValue,
			data_mem_info: *const OrtMemoryInfo,
			values_shape: *const i64,
			values_shape_len: usize,
			values: *const ::std::os::raw::c_void,
			indices_shape_data: *const i64,
			indices_shape_len: usize,
			indices_data: *const i32,
		) -> OrtStatusPtr,
	>,
	pub CreateSparseTensorWithValuesAsOrtValue: ::std::option::Option<
		unsafe extern "C" fn(
			info: *const OrtMemoryInfo,
			p_data: *mut ::std::os::raw::c_void,
			dense_shape: *const i64,
			dense_shape_len: usize,
			values_shape: *const i64,
			values_shape_len: usize,
			type_: ONNXTensorElementDataType,
			out: *mut *mut OrtValue,
		) -> OrtStatusPtr,
	>,
	pub UseCooIndices: ::std::option::Option<unsafe extern "C" fn(ort_value: *mut OrtValue, indices_data: *mut i64, indices_num: usize) -> OrtStatusPtr>,
	pub UseCsrIndices: ::std::option::Option<
		unsafe extern "C" fn(ort_value: *mut OrtValue, inner_data: *mut i64, inner_num: usize, outer_data: *mut i64, outer_num: usize) -> OrtStatusPtr,
	>,
	pub UseBlockSparseIndices: ::std::option::Option<
		unsafe extern "C" fn(ort_value: *mut OrtValue, indices_shape: *const i64, indices_shape_len: usize, indices_data: *mut i32) -> OrtStatusPtr,
	>,
	pub GetSparseTensorFormat: ::std::option::Option<unsafe extern "C" fn(ort_value: *const OrtValue, out: *mut OrtSparseFormat) -> OrtStatusPtr>,
	pub GetSparseTensorValuesTypeAndShape:
		::std::option::Option<unsafe extern "C" fn(ort_value: *const OrtValue, out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr>,
	pub GetSparseTensorValues: ::std::option::Option<unsafe extern "C" fn(ort_value: *const OrtValue, out: *mut *const ::std::os::raw::c_void) -> OrtStatusPtr>,
	pub GetSparseTensorIndicesTypeShape: ::std::option::Option<
		unsafe extern "C" fn(ort_value: *const OrtValue, indices_format: OrtSparseIndicesFormat, out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr,
	>,
	pub GetSparseTensorIndices: ::std::option::Option<
		unsafe extern "C" fn(
			ort_value: *const OrtValue,
			indices_format: OrtSparseIndicesFormat,
			num_indices: *mut usize,
			indices: *mut *const ::std::os::raw::c_void,
		) -> OrtStatusPtr,
	>,
	pub HasValue: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, out: *mut ::std::os::raw::c_int) -> OrtStatusPtr>,
	pub KernelContext_GetGPUComputeStream:
		::std::option::Option<unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut *mut ::std::os::raw::c_void) -> OrtStatusPtr>,
	pub GetTensorMemoryInfo: ::std::option::Option<unsafe extern "C" fn(value: *const OrtValue, mem_info: *mut *const OrtMemoryInfo) -> OrtStatusPtr>,
	pub GetExecutionProviderApi: ::std::option::Option<
		unsafe extern "C" fn(provider_name: *const ::std::os::raw::c_char, version: u32, provider_api: *mut *const ::std::os::raw::c_void) -> OrtStatusPtr,
	>,
	pub SessionOptionsSetCustomCreateThreadFn:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, ort_custom_create_thread_fn: OrtCustomCreateThreadFn) -> OrtStatusPtr>,
	pub SessionOptionsSetCustomThreadCreationOptions: ::std::option::Option<
		unsafe extern "C" fn(options: *mut OrtSessionOptions, ort_custom_thread_creation_options: *mut ::std::os::raw::c_void) -> OrtStatusPtr,
	>,
	pub SessionOptionsSetCustomJoinThreadFn:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, ort_custom_join_thread_fn: OrtCustomJoinThreadFn) -> OrtStatusPtr>,
	pub SetGlobalCustomCreateThreadFn:
		::std::option::Option<unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions, ort_custom_create_thread_fn: OrtCustomCreateThreadFn) -> OrtStatusPtr>,
	pub SetGlobalCustomThreadCreationOptions: ::std::option::Option<
		unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions, ort_custom_thread_creation_options: *mut ::std::os::raw::c_void) -> OrtStatusPtr,
	>,
	pub SetGlobalCustomJoinThreadFn:
		::std::option::Option<unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions, ort_custom_join_thread_fn: OrtCustomJoinThreadFn) -> OrtStatusPtr>,
	pub SynchronizeBoundInputs: ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
	pub SynchronizeBoundOutputs: ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
	pub SessionOptionsAppendExecutionProvider_CUDA_V2:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, cuda_options: *const OrtCUDAProviderOptionsV2) -> OrtStatusPtr>,
	pub CreateCUDAProviderOptions: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtCUDAProviderOptionsV2) -> OrtStatusPtr>,
	pub UpdateCUDAProviderOptions: ::std::option::Option<
		unsafe extern "C" fn(
			cuda_options: *mut OrtCUDAProviderOptionsV2,
			provider_options_keys: *const *const ::std::os::raw::c_char,
			provider_options_values: *const *const ::std::os::raw::c_char,
			num_keys: usize,
		) -> OrtStatusPtr,
	>,
	pub GetCUDAProviderOptionsAsString: ::std::option::Option<
		unsafe extern "C" fn(
			cuda_options: *const OrtCUDAProviderOptionsV2,
			allocator: *mut OrtAllocator,
			ptr: *mut *mut ::std::os::raw::c_char,
		) -> OrtStatusPtr,
	>,
	#[doc = " \\brief Release an ::OrtCUDAProviderOptionsV2\n\n \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does\n\n \\since Version 1.11."]
	pub ReleaseCUDAProviderOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCUDAProviderOptionsV2)>,
	pub SessionOptionsAppendExecutionProvider_MIGraphX:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, migraphx_options: *const OrtMIGraphXProviderOptions) -> OrtStatusPtr>,
	pub AddExternalInitializers: ::std::option::Option<
		unsafe extern "C" fn(
			options: *mut OrtSessionOptions,
			initializer_names: *const *const ::std::os::raw::c_char,
			initializers: *const *const OrtValue,
			initializers_num: usize,
		) -> OrtStatusPtr,
	>,
	pub CreateOpAttr: ::std::option::Option<
		unsafe extern "C" fn(
			name: *const ::std::os::raw::c_char,
			data: *const ::std::os::raw::c_void,
			len: ::std::os::raw::c_int,
			type_: OrtOpAttrType,
			op_attr: *mut *mut OrtOpAttr,
		) -> OrtStatusPtr,
	>,
	pub ReleaseOpAttr: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOpAttr)>,
	pub CreateOp: ::std::option::Option<
		unsafe extern "C" fn(
			info: *const OrtKernelInfo,
			op_name: *const ::std::os::raw::c_char,
			domain: *const ::std::os::raw::c_char,
			version: ::std::os::raw::c_int,
			type_constraint_names: *mut *const ::std::os::raw::c_char,
			type_constraint_values: *const ONNXTensorElementDataType,
			type_constraint_count: ::std::os::raw::c_int,
			attr_values: *const *const OrtOpAttr,
			attr_count: ::std::os::raw::c_int,
			input_count: ::std::os::raw::c_int,
			output_count: ::std::os::raw::c_int,
			ort_op: *mut *mut OrtOp,
		) -> OrtStatusPtr,
	>,
	pub InvokeOp: ::std::option::Option<
		unsafe extern "C" fn(
			context: *const OrtKernelContext,
			ort_op: *const OrtOp,
			input_values: *const *const OrtValue,
			input_count: ::std::os::raw::c_int,
			output_values: *const *mut OrtValue,
			output_count: ::std::os::raw::c_int,
		) -> OrtStatusPtr,
	>,
	pub ReleaseOp: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOp)>,
	pub SessionOptionsAppendExecutionProvider: ::std::option::Option<
		unsafe extern "C" fn(
			options: *mut OrtSessionOptions,
			provider_name: *const ::std::os::raw::c_char,
			provider_options_keys: *const *const ::std::os::raw::c_char,
			provider_options_values: *const *const ::std::os::raw::c_char,
			num_keys: usize,
		) -> OrtStatusPtr,
	>,
	pub CopyKernelInfo: ::std::option::Option<unsafe extern "C" fn(info: *const OrtKernelInfo, info_copy: *mut *mut OrtKernelInfo) -> OrtStatusPtr>,
	pub ReleaseKernelInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtKernelInfo)>,
	pub GetTrainingApi: ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtTrainingApi>,
	pub SessionOptionsAppendExecutionProvider_CANN:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, cann_options: *const OrtCANNProviderOptions) -> OrtStatusPtr>,
	pub CreateCANNProviderOptions: ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtCANNProviderOptions) -> OrtStatusPtr>,
	pub UpdateCANNProviderOptions: ::std::option::Option<
		unsafe extern "C" fn(
			cann_options: *mut OrtCANNProviderOptions,
			provider_options_keys: *const *const ::std::os::raw::c_char,
			provider_options_values: *const *const ::std::os::raw::c_char,
			num_keys: usize,
		) -> OrtStatusPtr,
	>,
	pub GetCANNProviderOptionsAsString: ::std::option::Option<
		unsafe extern "C" fn(cann_options: *const OrtCANNProviderOptions, allocator: *mut OrtAllocator, ptr: *mut *mut ::std::os::raw::c_char) -> OrtStatusPtr,
	>,
	#[doc = " \\brief Release an OrtCANNProviderOptions\n\n \\param[in] the pointer of OrtCANNProviderOptions which will been deleted\n\n \\since Version 1.13."]
	pub ReleaseCANNProviderOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCANNProviderOptions)>,
	pub MemoryInfoGetDeviceType: ::std::option::Option<unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemoryInfoDeviceType)>,
	pub UpdateEnvWithCustomLogLevel: ::std::option::Option<unsafe extern "C" fn(ort_env: *mut OrtEnv, log_severity_level: OrtLoggingLevel) -> OrtStatusPtr>,
	pub SetGlobalIntraOpThreadAffinity:
		::std::option::Option<unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions, affinity_string: *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub RegisterCustomOpsLibrary_V2:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, library_name: *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub RegisterCustomOpsUsingFunction:
		::std::option::Option<unsafe extern "C" fn(options: *mut OrtSessionOptions, registration_func_name: *const ::std::os::raw::c_char) -> OrtStatusPtr>,
	pub KernelInfo_GetInputCount: ::std::option::Option<unsafe extern "C" fn(info: *const OrtKernelInfo, out: *mut usize) -> OrtStatusPtr>,
	pub KernelInfo_GetOutputCount: ::std::option::Option<unsafe extern "C" fn(info: *const OrtKernelInfo, out: *mut usize) -> OrtStatusPtr>,
	pub KernelInfo_GetInputName: ::std::option::Option<
		unsafe extern "C" fn(info: *const OrtKernelInfo, index: usize, out: *mut ::std::os::raw::c_char, size: *mut usize) -> OrtStatusPtr,
	>,
	pub KernelInfo_GetOutputName: ::std::option::Option<
		unsafe extern "C" fn(info: *const OrtKernelInfo, index: usize, out: *mut ::std::os::raw::c_char, size: *mut usize) -> OrtStatusPtr,
	>,
	pub KernelInfo_GetInputTypeInfo:
		::std::option::Option<unsafe extern "C" fn(info: *const OrtKernelInfo, index: usize, type_info: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub KernelInfo_GetOutputTypeInfo:
		::std::option::Option<unsafe extern "C" fn(info: *const OrtKernelInfo, index: usize, type_info: *mut *mut OrtTypeInfo) -> OrtStatusPtr>,
	pub KernelInfoGetAttribute_tensor: ::std::option::Option<
		unsafe extern "C" fn(
			info: *const OrtKernelInfo,
			name: *const ::std::os::raw::c_char,
			allocator: *mut OrtAllocator,
			out: *mut *mut OrtValue,
		) -> OrtStatusPtr,
	>,
	pub HasSessionConfigEntry: ::std::option::Option<
		unsafe extern "C" fn(options: *const OrtSessionOptions, config_key: *const ::std::os::raw::c_char, out: *mut ::std::os::raw::c_int) -> OrtStatusPtr,
	>,
	pub GetSessionConfigEntry: ::std::option::Option<
		unsafe extern "C" fn(
			options: *const OrtSessionOptions,
			config_key: *const ::std::os::raw::c_char,
			config_value: *mut ::std::os::raw::c_char,
			size: *mut usize,
		) -> OrtStatusPtr,
	>,
}
#[test]
fn bindgen_test_layout_OrtApi() {
	const UNINIT: ::std::mem::MaybeUninit<OrtApi> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtApi>(), 1912usize, concat!("Size of: ", stringify!(OrtApi)));
	assert_eq!(::std::mem::align_of::<OrtApi>(), 8usize, concat!("Alignment of ", stringify!(OrtApi)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateStatus) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateStatus))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetErrorCode) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetErrorCode))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetErrorMessage) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetErrorMessage))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateEnv) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateEnv))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateEnvWithCustomLogger) as usize - ptr as usize },
		32usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateEnvWithCustomLogger))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).EnableTelemetryEvents) as usize - ptr as usize },
		40usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(EnableTelemetryEvents))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).DisableTelemetryEvents) as usize - ptr as usize },
		48usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(DisableTelemetryEvents))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateSession) as usize - ptr as usize },
		56usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateSession))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateSessionFromArray) as usize - ptr as usize },
		64usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateSessionFromArray))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Run) as usize - ptr as usize },
		72usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(Run))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateSessionOptions) as usize - ptr as usize },
		80usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateSessionOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetOptimizedModelFilePath) as usize - ptr as usize },
		88usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetOptimizedModelFilePath))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CloneSessionOptions) as usize - ptr as usize },
		96usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CloneSessionOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetSessionExecutionMode) as usize - ptr as usize },
		104usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetSessionExecutionMode))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).EnableProfiling) as usize - ptr as usize },
		112usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(EnableProfiling))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).DisableProfiling) as usize - ptr as usize },
		120usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(DisableProfiling))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).EnableMemPattern) as usize - ptr as usize },
		128usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(EnableMemPattern))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).DisableMemPattern) as usize - ptr as usize },
		136usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(DisableMemPattern))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).EnableCpuMemArena) as usize - ptr as usize },
		144usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(EnableCpuMemArena))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).DisableCpuMemArena) as usize - ptr as usize },
		152usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(DisableCpuMemArena))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetSessionLogId) as usize - ptr as usize },
		160usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetSessionLogId))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetSessionLogVerbosityLevel) as usize - ptr as usize },
		168usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetSessionLogVerbosityLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetSessionLogSeverityLevel) as usize - ptr as usize },
		176usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetSessionLogSeverityLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetSessionGraphOptimizationLevel) as usize - ptr as usize },
		184usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetSessionGraphOptimizationLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetIntraOpNumThreads) as usize - ptr as usize },
		192usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetIntraOpNumThreads))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetInterOpNumThreads) as usize - ptr as usize },
		200usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetInterOpNumThreads))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateCustomOpDomain) as usize - ptr as usize },
		208usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateCustomOpDomain))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CustomOpDomain_Add) as usize - ptr as usize },
		216usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CustomOpDomain_Add))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AddCustomOpDomain) as usize - ptr as usize },
		224usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AddCustomOpDomain))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RegisterCustomOpsLibrary) as usize - ptr as usize },
		232usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RegisterCustomOpsLibrary))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetInputCount) as usize - ptr as usize },
		240usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetInputCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetOutputCount) as usize - ptr as usize },
		248usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetOutputCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerCount) as usize - ptr as usize },
		256usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetOverridableInitializerCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetInputTypeInfo) as usize - ptr as usize },
		264usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetInputTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetOutputTypeInfo) as usize - ptr as usize },
		272usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetOutputTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerTypeInfo) as usize - ptr as usize },
		280usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetOverridableInitializerTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetInputName) as usize - ptr as usize },
		288usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetInputName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetOutputName) as usize - ptr as usize },
		296usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetOutputName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerName) as usize - ptr as usize },
		304usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetOverridableInitializerName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateRunOptions) as usize - ptr as usize },
		312usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateRunOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsSetRunLogVerbosityLevel) as usize - ptr as usize },
		320usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsSetRunLogVerbosityLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsSetRunLogSeverityLevel) as usize - ptr as usize },
		328usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsSetRunLogSeverityLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsSetRunTag) as usize - ptr as usize },
		336usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsSetRunTag))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsGetRunLogVerbosityLevel) as usize - ptr as usize },
		344usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsGetRunLogVerbosityLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsGetRunLogSeverityLevel) as usize - ptr as usize },
		352usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsGetRunLogSeverityLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsGetRunTag) as usize - ptr as usize },
		360usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsGetRunTag))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsSetTerminate) as usize - ptr as usize },
		368usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsSetTerminate))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunOptionsUnsetTerminate) as usize - ptr as usize },
		376usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunOptionsUnsetTerminate))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateTensorAsOrtValue) as usize - ptr as usize },
		384usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateTensorAsOrtValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateTensorWithDataAsOrtValue) as usize - ptr as usize },
		392usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateTensorWithDataAsOrtValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).IsTensor) as usize - ptr as usize },
		400usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(IsTensor))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTensorMutableData) as usize - ptr as usize },
		408usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTensorMutableData))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).FillStringTensor) as usize - ptr as usize },
		416usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(FillStringTensor))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetStringTensorDataLength) as usize - ptr as usize },
		424usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetStringTensorDataLength))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetStringTensorContent) as usize - ptr as usize },
		432usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetStringTensorContent))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CastTypeInfoToTensorInfo) as usize - ptr as usize },
		440usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CastTypeInfoToTensorInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetOnnxTypeFromTypeInfo) as usize - ptr as usize },
		448usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetOnnxTypeFromTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateTensorTypeAndShapeInfo) as usize - ptr as usize },
		456usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateTensorTypeAndShapeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetTensorElementType) as usize - ptr as usize },
		464usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetTensorElementType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetDimensions) as usize - ptr as usize },
		472usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetDimensions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTensorElementType) as usize - ptr as usize },
		480usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTensorElementType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetDimensionsCount) as usize - ptr as usize },
		488usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetDimensionsCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetDimensions) as usize - ptr as usize },
		496usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetDimensions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSymbolicDimensions) as usize - ptr as usize },
		504usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSymbolicDimensions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTensorShapeElementCount) as usize - ptr as usize },
		512usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTensorShapeElementCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTensorTypeAndShape) as usize - ptr as usize },
		520usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTensorTypeAndShape))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTypeInfo) as usize - ptr as usize },
		528usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetValueType) as usize - ptr as usize },
		536usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetValueType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateMemoryInfo) as usize - ptr as usize },
		544usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateMemoryInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateCpuMemoryInfo) as usize - ptr as usize },
		552usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateCpuMemoryInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CompareMemoryInfo) as usize - ptr as usize },
		560usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CompareMemoryInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).MemoryInfoGetName) as usize - ptr as usize },
		568usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(MemoryInfoGetName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).MemoryInfoGetId) as usize - ptr as usize },
		576usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(MemoryInfoGetId))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).MemoryInfoGetMemType) as usize - ptr as usize },
		584usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(MemoryInfoGetMemType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).MemoryInfoGetType) as usize - ptr as usize },
		592usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(MemoryInfoGetType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AllocatorAlloc) as usize - ptr as usize },
		600usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AllocatorAlloc))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AllocatorFree) as usize - ptr as usize },
		608usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AllocatorFree))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AllocatorGetInfo) as usize - ptr as usize },
		616usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AllocatorGetInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetAllocatorWithDefaultOptions) as usize - ptr as usize },
		624usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetAllocatorWithDefaultOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AddFreeDimensionOverride) as usize - ptr as usize },
		632usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AddFreeDimensionOverride))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetValue) as usize - ptr as usize },
		640usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetValueCount) as usize - ptr as usize },
		648usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetValueCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateValue) as usize - ptr as usize },
		656usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateOpaqueValue) as usize - ptr as usize },
		664usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateOpaqueValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetOpaqueValue) as usize - ptr as usize },
		672usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetOpaqueValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_float) as usize - ptr as usize },
		680usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfoGetAttribute_float))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_int64) as usize - ptr as usize },
		688usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfoGetAttribute_int64))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_string) as usize - ptr as usize },
		696usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfoGetAttribute_string))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelContext_GetInputCount) as usize - ptr as usize },
		704usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelContext_GetInputCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelContext_GetOutputCount) as usize - ptr as usize },
		712usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelContext_GetOutputCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelContext_GetInput) as usize - ptr as usize },
		720usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelContext_GetInput))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelContext_GetOutput) as usize - ptr as usize },
		728usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelContext_GetOutput))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseEnv) as usize - ptr as usize },
		736usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseEnv))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseStatus) as usize - ptr as usize },
		744usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseStatus))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseMemoryInfo) as usize - ptr as usize },
		752usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseMemoryInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseSession) as usize - ptr as usize },
		760usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseSession))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseValue) as usize - ptr as usize },
		768usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseRunOptions) as usize - ptr as usize },
		776usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseRunOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseTypeInfo) as usize - ptr as usize },
		784usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseTensorTypeAndShapeInfo) as usize - ptr as usize },
		792usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseTensorTypeAndShapeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseSessionOptions) as usize - ptr as usize },
		800usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseSessionOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseCustomOpDomain) as usize - ptr as usize },
		808usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseCustomOpDomain))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetDenotationFromTypeInfo) as usize - ptr as usize },
		816usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetDenotationFromTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CastTypeInfoToMapTypeInfo) as usize - ptr as usize },
		824usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CastTypeInfoToMapTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CastTypeInfoToSequenceTypeInfo) as usize - ptr as usize },
		832usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CastTypeInfoToSequenceTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetMapKeyType) as usize - ptr as usize },
		840usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetMapKeyType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetMapValueType) as usize - ptr as usize },
		848usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetMapValueType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSequenceElementType) as usize - ptr as usize },
		856usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSequenceElementType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseMapTypeInfo) as usize - ptr as usize },
		864usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseMapTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseSequenceTypeInfo) as usize - ptr as usize },
		872usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseSequenceTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionEndProfiling) as usize - ptr as usize },
		880usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionEndProfiling))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetModelMetadata) as usize - ptr as usize },
		888usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetModelMetadata))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataGetProducerName) as usize - ptr as usize },
		896usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataGetProducerName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataGetGraphName) as usize - ptr as usize },
		904usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataGetGraphName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataGetDomain) as usize - ptr as usize },
		912usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataGetDomain))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataGetDescription) as usize - ptr as usize },
		920usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataGetDescription))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataLookupCustomMetadataMap) as usize - ptr as usize },
		928usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataLookupCustomMetadataMap))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataGetVersion) as usize - ptr as usize },
		936usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataGetVersion))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseModelMetadata) as usize - ptr as usize },
		944usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseModelMetadata))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateEnvWithGlobalThreadPools) as usize - ptr as usize },
		952usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateEnvWithGlobalThreadPools))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).DisablePerSessionThreads) as usize - ptr as usize },
		960usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(DisablePerSessionThreads))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateThreadingOptions) as usize - ptr as usize },
		968usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateThreadingOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseThreadingOptions) as usize - ptr as usize },
		976usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseThreadingOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataGetCustomMetadataMapKeys) as usize - ptr as usize },
		984usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataGetCustomMetadataMapKeys))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AddFreeDimensionOverrideByName) as usize - ptr as usize },
		992usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AddFreeDimensionOverrideByName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetAvailableProviders) as usize - ptr as usize },
		1000usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetAvailableProviders))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseAvailableProviders) as usize - ptr as usize },
		1008usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseAvailableProviders))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetStringTensorElementLength) as usize - ptr as usize },
		1016usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetStringTensorElementLength))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetStringTensorElement) as usize - ptr as usize },
		1024usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetStringTensorElement))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).FillStringTensorElement) as usize - ptr as usize },
		1032usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(FillStringTensorElement))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AddSessionConfigEntry) as usize - ptr as usize },
		1040usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AddSessionConfigEntry))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateAllocator) as usize - ptr as usize },
		1048usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateAllocator))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseAllocator) as usize - ptr as usize },
		1056usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseAllocator))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RunWithBinding) as usize - ptr as usize },
		1064usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RunWithBinding))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateIoBinding) as usize - ptr as usize },
		1072usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateIoBinding))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseIoBinding) as usize - ptr as usize },
		1080usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseIoBinding))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).BindInput) as usize - ptr as usize },
		1088usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(BindInput))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).BindOutput) as usize - ptr as usize },
		1096usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(BindOutput))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).BindOutputToDevice) as usize - ptr as usize },
		1104usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(BindOutputToDevice))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetBoundOutputNames) as usize - ptr as usize },
		1112usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetBoundOutputNames))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetBoundOutputValues) as usize - ptr as usize },
		1120usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetBoundOutputValues))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ClearBoundInputs) as usize - ptr as usize },
		1128usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ClearBoundInputs))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ClearBoundOutputs) as usize - ptr as usize },
		1136usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ClearBoundOutputs))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).TensorAt) as usize - ptr as usize },
		1144usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(TensorAt))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateAndRegisterAllocator) as usize - ptr as usize },
		1152usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateAndRegisterAllocator))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetLanguageProjection) as usize - ptr as usize },
		1160usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetLanguageProjection))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionGetProfilingStartTimeNs) as usize - ptr as usize },
		1168usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionGetProfilingStartTimeNs))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalIntraOpNumThreads) as usize - ptr as usize },
		1176usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalIntraOpNumThreads))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalInterOpNumThreads) as usize - ptr as usize },
		1184usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalInterOpNumThreads))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalSpinControl) as usize - ptr as usize },
		1192usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalSpinControl))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AddInitializer) as usize - ptr as usize },
		1200usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AddInitializer))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateEnvWithCustomLoggerAndGlobalThreadPools) as usize - ptr as usize },
		1208usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateEnvWithCustomLoggerAndGlobalThreadPools))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CUDA) as usize - ptr as usize },
		1216usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_CUDA))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_ROCM) as usize - ptr as usize },
		1224usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_ROCM))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_OpenVINO) as usize - ptr as usize },
		1232usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_OpenVINO))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalDenormalAsZero) as usize - ptr as usize },
		1240usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalDenormalAsZero))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateArenaCfg) as usize - ptr as usize },
		1248usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateArenaCfg))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseArenaCfg) as usize - ptr as usize },
		1256usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseArenaCfg))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ModelMetadataGetGraphDescription) as usize - ptr as usize },
		1264usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ModelMetadataGetGraphDescription))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_TensorRT) as usize - ptr as usize },
		1272usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_TensorRT))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetCurrentGpuDeviceId) as usize - ptr as usize },
		1280usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetCurrentGpuDeviceId))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentGpuDeviceId) as usize - ptr as usize },
		1288usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetCurrentGpuDeviceId))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfoGetAttributeArray_float) as usize - ptr as usize },
		1296usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfoGetAttributeArray_float))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfoGetAttributeArray_int64) as usize - ptr as usize },
		1304usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfoGetAttributeArray_int64))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateArenaCfgV2) as usize - ptr as usize },
		1312usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateArenaCfgV2))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AddRunConfigEntry) as usize - ptr as usize },
		1320usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AddRunConfigEntry))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreatePrepackedWeightsContainer) as usize - ptr as usize },
		1328usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreatePrepackedWeightsContainer))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleasePrepackedWeightsContainer) as usize - ptr as usize },
		1336usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleasePrepackedWeightsContainer))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateSessionWithPrepackedWeightsContainer) as usize - ptr as usize },
		1344usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateSessionWithPrepackedWeightsContainer))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateSessionFromArrayWithPrepackedWeightsContainer) as usize - ptr as usize },
		1352usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateSessionFromArrayWithPrepackedWeightsContainer))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_TensorRT_V2) as usize - ptr as usize },
		1360usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_TensorRT_V2))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateTensorRTProviderOptions) as usize - ptr as usize },
		1368usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateTensorRTProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UpdateTensorRTProviderOptions) as usize - ptr as usize },
		1376usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UpdateTensorRTProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTensorRTProviderOptionsAsString) as usize - ptr as usize },
		1384usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTensorRTProviderOptionsAsString))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseTensorRTProviderOptions) as usize - ptr as usize },
		1392usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseTensorRTProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).EnableOrtCustomOps) as usize - ptr as usize },
		1400usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(EnableOrtCustomOps))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RegisterAllocator) as usize - ptr as usize },
		1408usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RegisterAllocator))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UnregisterAllocator) as usize - ptr as usize },
		1416usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UnregisterAllocator))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).IsSparseTensor) as usize - ptr as usize },
		1424usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(IsSparseTensor))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateSparseTensorAsOrtValue) as usize - ptr as usize },
		1432usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateSparseTensorAsOrtValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).FillSparseTensorCoo) as usize - ptr as usize },
		1440usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(FillSparseTensorCoo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).FillSparseTensorCsr) as usize - ptr as usize },
		1448usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(FillSparseTensorCsr))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).FillSparseTensorBlockSparse) as usize - ptr as usize },
		1456usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(FillSparseTensorBlockSparse))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateSparseTensorWithValuesAsOrtValue) as usize - ptr as usize },
		1464usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateSparseTensorWithValuesAsOrtValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UseCooIndices) as usize - ptr as usize },
		1472usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UseCooIndices))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UseCsrIndices) as usize - ptr as usize },
		1480usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UseCsrIndices))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UseBlockSparseIndices) as usize - ptr as usize },
		1488usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UseBlockSparseIndices))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSparseTensorFormat) as usize - ptr as usize },
		1496usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSparseTensorFormat))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSparseTensorValuesTypeAndShape) as usize - ptr as usize },
		1504usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSparseTensorValuesTypeAndShape))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSparseTensorValues) as usize - ptr as usize },
		1512usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSparseTensorValues))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSparseTensorIndicesTypeShape) as usize - ptr as usize },
		1520usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSparseTensorIndicesTypeShape))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSparseTensorIndices) as usize - ptr as usize },
		1528usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSparseTensorIndices))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).HasValue) as usize - ptr as usize },
		1536usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(HasValue))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelContext_GetGPUComputeStream) as usize - ptr as usize },
		1544usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelContext_GetGPUComputeStream))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTensorMemoryInfo) as usize - ptr as usize },
		1552usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTensorMemoryInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetExecutionProviderApi) as usize - ptr as usize },
		1560usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetExecutionProviderApi))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomCreateThreadFn) as usize - ptr as usize },
		1568usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsSetCustomCreateThreadFn))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomThreadCreationOptions) as usize - ptr as usize },
		1576usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsSetCustomThreadCreationOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomJoinThreadFn) as usize - ptr as usize },
		1584usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsSetCustomJoinThreadFn))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalCustomCreateThreadFn) as usize - ptr as usize },
		1592usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalCustomCreateThreadFn))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalCustomThreadCreationOptions) as usize - ptr as usize },
		1600usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalCustomThreadCreationOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalCustomJoinThreadFn) as usize - ptr as usize },
		1608usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalCustomJoinThreadFn))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SynchronizeBoundInputs) as usize - ptr as usize },
		1616usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SynchronizeBoundInputs))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SynchronizeBoundOutputs) as usize - ptr as usize },
		1624usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SynchronizeBoundOutputs))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CUDA_V2) as usize - ptr as usize },
		1632usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_CUDA_V2))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateCUDAProviderOptions) as usize - ptr as usize },
		1640usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateCUDAProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UpdateCUDAProviderOptions) as usize - ptr as usize },
		1648usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UpdateCUDAProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetCUDAProviderOptionsAsString) as usize - ptr as usize },
		1656usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetCUDAProviderOptionsAsString))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseCUDAProviderOptions) as usize - ptr as usize },
		1664usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseCUDAProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_MIGraphX) as usize - ptr as usize },
		1672usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_MIGraphX))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).AddExternalInitializers) as usize - ptr as usize },
		1680usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(AddExternalInitializers))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateOpAttr) as usize - ptr as usize },
		1688usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateOpAttr))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseOpAttr) as usize - ptr as usize },
		1696usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseOpAttr))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateOp) as usize - ptr as usize },
		1704usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateOp))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).InvokeOp) as usize - ptr as usize },
		1712usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(InvokeOp))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseOp) as usize - ptr as usize },
		1720usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseOp))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider) as usize - ptr as usize },
		1728usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CopyKernelInfo) as usize - ptr as usize },
		1736usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CopyKernelInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseKernelInfo) as usize - ptr as usize },
		1744usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseKernelInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetTrainingApi) as usize - ptr as usize },
		1752usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetTrainingApi))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CANN) as usize - ptr as usize },
		1760usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SessionOptionsAppendExecutionProvider_CANN))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateCANNProviderOptions) as usize - ptr as usize },
		1768usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(CreateCANNProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UpdateCANNProviderOptions) as usize - ptr as usize },
		1776usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UpdateCANNProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetCANNProviderOptionsAsString) as usize - ptr as usize },
		1784usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetCANNProviderOptionsAsString))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).ReleaseCANNProviderOptions) as usize - ptr as usize },
		1792usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(ReleaseCANNProviderOptions))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).MemoryInfoGetDeviceType) as usize - ptr as usize },
		1800usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(MemoryInfoGetDeviceType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).UpdateEnvWithCustomLogLevel) as usize - ptr as usize },
		1808usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(UpdateEnvWithCustomLogLevel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).SetGlobalIntraOpThreadAffinity) as usize - ptr as usize },
		1816usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(SetGlobalIntraOpThreadAffinity))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RegisterCustomOpsLibrary_V2) as usize - ptr as usize },
		1824usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RegisterCustomOpsLibrary_V2))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).RegisterCustomOpsUsingFunction) as usize - ptr as usize },
		1832usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(RegisterCustomOpsUsingFunction))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfo_GetInputCount) as usize - ptr as usize },
		1840usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfo_GetInputCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfo_GetOutputCount) as usize - ptr as usize },
		1848usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfo_GetOutputCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfo_GetInputName) as usize - ptr as usize },
		1856usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfo_GetInputName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfo_GetOutputName) as usize - ptr as usize },
		1864usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfo_GetOutputName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfo_GetInputTypeInfo) as usize - ptr as usize },
		1872usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfo_GetInputTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfo_GetOutputTypeInfo) as usize - ptr as usize },
		1880usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfo_GetOutputTypeInfo))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_tensor) as usize - ptr as usize },
		1888usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(KernelInfoGetAttribute_tensor))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).HasSessionConfigEntry) as usize - ptr as usize },
		1896usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(HasSessionConfigEntry))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetSessionConfigEntry) as usize - ptr as usize },
		1904usize,
		concat!("Offset of field: ", stringify!(OrtApi), "::", stringify!(GetSessionConfigEntry))
	);
}
pub const OrtCustomOpInputOutputCharacteristic_INPUT_OUTPUT_REQUIRED: OrtCustomOpInputOutputCharacteristic = 0;
pub const OrtCustomOpInputOutputCharacteristic_INPUT_OUTPUT_OPTIONAL: OrtCustomOpInputOutputCharacteristic = 1;
pub const OrtCustomOpInputOutputCharacteristic_INPUT_OUTPUT_VARIADIC: OrtCustomOpInputOutputCharacteristic = 2;
pub type OrtCustomOpInputOutputCharacteristic = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOp {
	pub version: u32,
	pub CreateKernel:
		::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp, api: *const OrtApi, info: *const OrtKernelInfo) -> *mut ::std::os::raw::c_void>,
	pub GetName: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char>,
	pub GetExecutionProviderType: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char>,
	pub GetInputType: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType>,
	pub GetInputTypeCount: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
	pub GetOutputType: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType>,
	pub GetOutputTypeCount: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
	pub KernelCompute: ::std::option::Option<unsafe extern "C" fn(op_kernel: *mut ::std::os::raw::c_void, context: *mut OrtKernelContext)>,
	pub KernelDestroy: ::std::option::Option<unsafe extern "C" fn(op_kernel: *mut ::std::os::raw::c_void)>,
	pub GetInputCharacteristic: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> OrtCustomOpInputOutputCharacteristic>,
	pub GetOutputCharacteristic: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> OrtCustomOpInputOutputCharacteristic>,
	pub GetInputMemoryType: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> OrtMemType>,
	pub GetVariadicInputMinArity: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int>,
	pub GetVariadicInputHomogeneity: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int>,
	pub GetVariadicOutputMinArity: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int>,
	pub GetVariadicOutputHomogeneity: ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_OrtCustomOp() {
	const UNINIT: ::std::mem::MaybeUninit<OrtCustomOp> = ::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(::std::mem::size_of::<OrtCustomOp>(), 136usize, concat!("Size of: ", stringify!(OrtCustomOp)));
	assert_eq!(::std::mem::align_of::<OrtCustomOp>(), 8usize, concat!("Alignment of ", stringify!(OrtCustomOp)));
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(version))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).CreateKernel) as usize - ptr as usize },
		8usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(CreateKernel))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetName) as usize - ptr as usize },
		16usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetName))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetExecutionProviderType) as usize - ptr as usize },
		24usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetExecutionProviderType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetInputType) as usize - ptr as usize },
		32usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetInputType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetInputTypeCount) as usize - ptr as usize },
		40usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetInputTypeCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetOutputType) as usize - ptr as usize },
		48usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetOutputType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetOutputTypeCount) as usize - ptr as usize },
		56usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetOutputTypeCount))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelCompute) as usize - ptr as usize },
		64usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(KernelCompute))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).KernelDestroy) as usize - ptr as usize },
		72usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(KernelDestroy))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetInputCharacteristic) as usize - ptr as usize },
		80usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetInputCharacteristic))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetOutputCharacteristic) as usize - ptr as usize },
		88usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetOutputCharacteristic))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetInputMemoryType) as usize - ptr as usize },
		96usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetInputMemoryType))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetVariadicInputMinArity) as usize - ptr as usize },
		104usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetVariadicInputMinArity))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetVariadicInputHomogeneity) as usize - ptr as usize },
		112usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetVariadicInputHomogeneity))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetVariadicOutputMinArity) as usize - ptr as usize },
		120usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetVariadicOutputMinArity))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).GetVariadicOutputHomogeneity) as usize - ptr as usize },
		128usize,
		concat!("Offset of field: ", stringify!(OrtCustomOp), "::", stringify!(GetVariadicOutputHomogeneity))
	);
}
extern "C" {
	pub fn OrtSessionOptionsAppendExecutionProvider_CUDA(options: *mut OrtSessionOptions, device_id: ::std::os::raw::c_int) -> OrtStatusPtr;
}
extern "C" {
	pub fn OrtSessionOptionsAppendExecutionProvider_MIGraphX(options: *mut OrtSessionOptions, device_id: ::std::os::raw::c_int) -> OrtStatusPtr;
}
